# Generated by Django 3.1.7 on 2021-03-27 20:21

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import hackathon.models
import stdimage.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Atividade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=80, verbose_name='Nome')),
                ('descricao', models.CharField(max_length=280, verbose_name='Sub Título')),
                ('preco', models.DecimalField(blank=True, decimal_places=2, max_digits=19, null=True, verbose_name='Preço')),
                ('banner', stdimage.models.StdImageField(upload_to=hackathon.models.get_file_path, verbose_name='Banner')),
                ('iframe_url', models.URLField(blank=True, null=True, verbose_name='Link 3D')),
            ],
            options={
                'verbose_name': 'Atividade',
            },
        ),
        migrations.CreateModel(
            name='Estado',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=80, verbose_name='Nome')),
                ('descricao', models.CharField(max_length=280, verbose_name='Sub Título')),
                ('banner', stdimage.models.StdImageField(upload_to=hackathon.models.get_file_path, verbose_name='Banner')),
                ('iframe_url', models.URLField(blank=True, null=True, verbose_name='Link 3D')),
            ],
            options={
                'verbose_name': 'Estado',
            },
        ),
        migrations.CreateModel(
            name='Hospedagem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=80, verbose_name='Nome')),
                ('descricao', models.CharField(max_length=280, verbose_name='Sub Título')),
                ('preco', models.DecimalField(blank=True, decimal_places=2, max_digits=19, null=True, verbose_name='Preço')),
                ('banner', stdimage.models.StdImageField(upload_to=hackathon.models.get_file_path, verbose_name='Banner')),
                ('iframe_url', models.URLField(blank=True, null=True, verbose_name='Link 3D')),
            ],
            options={
                'verbose_name': 'Hospedagem',
            },
        ),
        migrations.CreateModel(
            name='Lugar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=160, verbose_name='Titulo')),
                ('descricao', models.CharField(max_length=280, verbose_name='Sub Título')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Texto de apresentação')),
                ('banner', stdimage.models.StdImageField(upload_to=hackathon.models.get_file_path, verbose_name='Banner')),
                ('iframe_url', models.URLField(blank=True, null=True, verbose_name='Link 3D')),
                ('estado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hackathon.estado', verbose_name='Estado')),
            ],
            options={
                'verbose_name': 'Lugar',
            },
        ),
        migrations.CreateModel(
            name='Restaurante',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=80, verbose_name='Nome')),
                ('descricao', models.CharField(max_length=280, verbose_name='Sub Título')),
                ('banner', stdimage.models.StdImageField(upload_to=hackathon.models.get_file_path, verbose_name='Banner')),
                ('iframe_url', models.URLField(blank=True, null=True, verbose_name='Link 3D')),
                ('lugar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hackathon.lugar', verbose_name='Lugar')),
            ],
            options={
                'verbose_name': 'Restaurante',
            },
        ),
        migrations.CreateModel(
            name='Viagem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salario', models.DecimalField(blank=True, decimal_places=2, max_digits=19, null=True, verbose_name='Salario')),
                ('porcentagem', models.DecimalField(blank=True, decimal_places=0, max_digits=19, null=True, verbose_name='Porcentagem')),
                ('ativadade', models.ManyToManyField(to='hackathon.Atividade', verbose_name='Atividade')),
                ('estado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hackathon.estado', verbose_name='Estado')),
                ('hospedagem', models.ManyToManyField(to='hackathon.Hospedagem', verbose_name='Hospedagem')),
                ('lugar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hackathon.lugar', verbose_name='Lugar')),
                ('restaurante', models.ManyToManyField(to='hackathon.Restaurante', verbose_name='Restaurante')),
            ],
        ),
        migrations.AddField(
            model_name='hospedagem',
            name='lugar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hackathon.lugar', verbose_name='Lugar'),
        ),
        migrations.AddField(
            model_name='atividade',
            name='lugar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hackathon.lugar', verbose_name='Lugar'),
        ),
        migrations.CreateModel(
            name='CustomUsuario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('salario', models.DecimalField(blank=True, decimal_places=2, max_digits=19, null=True, verbose_name='Salario')),
                ('porcentagem', models.DecimalField(blank=True, decimal_places=0, max_digits=19, null=True, verbose_name='Porcentagem')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', hackathon.models.UsuarioManager()),
            ],
        ),
    ]
